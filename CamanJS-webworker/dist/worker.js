// Generated by CoffeeScript 1.9.1
(function() {
  var $, Log, Logger, Pixel, Util, parse, slice,
    slice1 = [].slice,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  slice = Array.prototype.slice;

  $ = function(sel, root) {
    if (root == null) {
      root = document;
    }
    if (typeof sel === "object" || (typeof exports !== "undefined" && exports !== null)) {
      return sel;
    }
    return root.querySelector(sel);
  };

  Util = (function() {
    function Util() {}

    Util.uniqid = (function() {
      var id;
      id = 0;
      return {
        get: function() {
          return id++;
        }
      };
    })();

    Util.extend = function() {
      var copy, dest, j, len, obj, prop, src;
      obj = arguments[0], src = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
      dest = obj;
      for (j = 0, len = src.length; j < len; j++) {
        copy = src[j];
        for (prop in copy) {
          if (!hasProp.call(copy, prop)) continue;
          dest[prop] = copy[prop];
        }
      }
      return dest;
    };

    Util.clampRGB = function(val) {
      if (val < 0) {
        return 0;
      }
      if (val > 255) {
        return 255;
      }
      return val;
    };

    Util.copyAttributes = function(from, to, opts) {
      var attr, j, len, ref, ref1, results;
      if (opts == null) {
        opts = {};
      }
      ref = from.attributes;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        attr = ref[j];
        if ((opts.except != null) && (ref1 = attr.nodeName, indexOf.call(opts.except, ref1) >= 0)) {
          continue;
        }
        results.push(to.setAttribute(attr.nodeName, attr.nodeValue));
      }
      return results;
    };

    Util.dataArray = function(length) {
      if (length == null) {
        length = 0;
      }
      if (Caman.NodeJS || (window.Uint8Array != null)) {
        return new Uint8Array(length);
      }
      return new Array(length);
    };

    return Util;

  })();

  Pixel = (function() {
    Pixel.coordinatesToLocation = function(x, y, width) {
      return (y * width + x) * 4;
    };

    Pixel.locationToCoordinates = function(loc, width) {
      var x, y;
      y = Math.floor(loc / (width * 4));
      x = (loc % (width * 4)) / 4;
      return {
        x: x,
        y: y
      };
    };

    function Pixel(r, g, b, a, c1) {
      this.r = r != null ? r : 0;
      this.g = g != null ? g : 0;
      this.b = b != null ? b : 0;
      this.a = a != null ? a : 255;
      this.c = c1 != null ? c1 : null;
      this.loc = 0;
    }

    Pixel.prototype.setContext = function(c) {
      return this.c = c;
    };

    Pixel.prototype.locationXY = function() {
      var x, y;
      if (this.c == null) {
        throw "Requires a CamanJS context";
      }
      y = this.c.dimensions.height - Math.floor(this.loc / (this.c.dimensions.width * 4));
      x = (this.loc % (this.c.dimensions.width * 4)) / 4;
      return {
        x: x,
        y: y
      };
    };

    Pixel.prototype.pixelAtLocation = function(loc) {
      if (this.c == null) {
        throw "Requires a CamanJS context";
      }
      return new Pixel(this.c.pixelData[loc], this.c.pixelData[loc + 1], this.c.pixelData[loc + 2], this.c.pixelData[loc + 3], this.c);
    };

    Pixel.prototype.getPixelRelative = function(horiz, vert) {
      var newLoc;
      if (this.c == null) {
        throw "Requires a CamanJS context";
      }
      newLoc = this.loc + (this.c.dimensions.width * 4 * (vert * -1)) + (4 * horiz);
      if (newLoc > this.c.pixelData.length || newLoc < 0) {
        return new Pixel(0, 0, 0, 255, this.c);
      }
      return this.pixelAtLocation(newLoc);
    };

    Pixel.prototype.putPixelRelative = function(horiz, vert, rgba) {
      var nowLoc;
      if (this.c == null) {
        throw "Requires a CamanJS context";
      }
      nowLoc = this.loc + (this.c.dimensions.width * 4 * (vert * -1)) + (4 * horiz);
      if (newLoc > this.c.pixelData.length || newLoc < 0) {
        return;
      }
      this.c.pixelData[newLoc] = rgba.r;
      this.c.pixelData[newLoc + 1] = rgba.g;
      this.c.pixelData[newLoc + 2] = rgba.b;
      this.c.pixelData[newLoc + 3] = rgba.a;
      return true;
    };

    Pixel.prototype.getPixel = function(x, y) {
      var loc;
      if (this.c == null) {
        throw "Requires a CamanJS context";
      }
      loc = this.coordinatesToLocation(x, y, this.width);
      return this.pixelAtLocation(loc);
    };

    Pixel.prototype.putPixel = function(x, y, rgba) {
      var loc;
      if (this.c == null) {
        throw "Requires a CamanJS context";
      }
      loc = this.coordinatesToLocation(x, y, this.width);
      this.c.pixelData[loc] = rgba.r;
      this.c.pixelData[loc + 1] = rgba.g;
      this.c.pixelData[loc + 2] = rgba.b;
      return this.c.pixelData[loc + 3] = rgba.a;
    };

    Pixel.prototype.toString = function() {
      return this.toKey();
    };

    Pixel.prototype.toHex = function(includeAlpha) {
      var hex;
      if (includeAlpha == null) {
        includeAlpha = false;
      }
      hex = '#' + this.r.toString(16) + this.g.toString(16) + this.b.toString(16);
      if (includeAlpha) {
        return hex + this.a.toString(16);
      } else {
        return hex;
      }
    };

    return Pixel;

  })();

  Logger = (function() {
    function Logger() {
      var j, len, name, ref;
      ref = ['log', 'info', 'warn', 'error'];
      for (j = 0, len = ref.length; j < len; j++) {
        name = ref[j];
        this[name] = (function(name) {
          return function() {
            var args, e;
            args = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
            try {
              return console[name].apply(console, 'Web worker', args);
            } catch (_error) {
              e = _error;
              return console[name]('Web worker', args);
            }
          };
        })(name);
      }
      this.debug = this.log;
    }

    return Logger;

  })();

  Log = new Logger();

  parse = function(str) {
    return JSON.parse(str, function(key, value) {
      var prefix;
      prefix = value.substring(0, 8);
      if (prefix === 'function') {
        return eval('(' + value + ')');
      }
      return value;
    });
  };

  self.imageData = 0;

  self.processFn = void 0;


  /* TODO
  - edit filters to manipulate arraybuffers instead of contexts
  - edit filters to not access function context (this.*)
  - return altered array buffer
   */

  self.renderFilter = (function(_this) {
    return function() {
      var i, j, pixel, ref, results;
      pixel = new Pixel();
      pixel.setContext(_this.c);
      Log.debug(_this);
      results = [];
      for (i = j = 0, ref = self.imageData.length; j < ref; i = j += 4) {
        pixel.loc = i;
        pixel.r = self.imageData[i];
        pixel.g = self.imageData[i + 1];
        pixel.b = self.imageData[i + 2];
        pixel.a = self.imageData[i + 3];
        Log.debug(self.processFn);
        self.processFn(pixel);
        self.imageData[i] = Util.clampRGB(pixel.r);
        self.imageData[i + 1] = Util.clampRGB(pixel.g);
        self.imageData[i + 2] = Util.clampRGB(pixel.b);
        results.push(self.imageData[i + 3] = Util.clampRGB(pixel.a));
      }
      return results;
    };
  })(this);

  self.addEventListener('message', function(e) {
    if (e.data.cmd != null) {
      Log.debug('receiving command: ' + e.data.cmd);
      switch (e.data.cmd) {
        case "renderFilter":
          if (self.imageData.byteLength) {
            self.processFn = parse(e.data.filter);
            Log.debug(self.processFn);
            self.renderFilter();
            return self.postMessage({
              'cmd': 'filterDone'
            });
          } else {
            return Log.debug('Cannot render filter with no image data.');
          }
          break;
        case "sendResults":
          return self.postMessage(self.imageData.buffer, [self.imageData.buffer]);
        default:
          return Log.debug('unknown command');
      }
    } else if (typeof e.data === 'string') {
      self.processFn = parse(e.data);
      return Log.debug('Filter sent to web worker');
    } else {
      self.imageData = new Uint8Array(e.data);
      Log.debug('image data sent, length ' + self.imageData.length);
      if (self.imageData.length === 0) {
        Log.debug('0 length image');
        return Log.debug(e.data);
      }
    }
  });

}).call(this);
